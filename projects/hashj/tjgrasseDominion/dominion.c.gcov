        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/*
        -:    9: * \name    - isTreasure
        -:   10: * \brief   - Function tells user if card is a treasure card or not
        -:   11: * \param   - int card - card type being checked
        -:   12: * \return  - 0 if it is a treasure, -1 if it is not a treasure
        -:   13: */
function isTreasure called 11 returned 100% blocks executed 100%
       11:   14:int isTreasure(int card){
       11:   15:    if ((card >= copper) && (card <= gold)){
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
        8:   16:        return SUCCESS;
        -:   17:    }
        3:   18:    return ERROR;
        -:   19:}
        -:   20:
        -:   21:/*
        -:   22: * \name    - isVictoryCard
        -:   23: * \brief   - Function tells user if card is a victory card or not
        -:   24: * \param   - int card - card type being checked
        -:   25: * \return  - 0 if it is a victory card, -1 if it is not
        -:   26: */
function isVictoryCard called 1 returned 100% blocks executed 80%
        1:   27:int isVictoryCard(int card){
        1:   28:    if ((card >= estate) && (card <= province)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   29:        return SUCCESS;
        -:   30:    }
        1:   31:    return ERROR;
        -:   32:}
        -:   33:
        -:   34:/*
        -:   35: * \name    - locateAndDiscard
        -:   36: * \brief   - Function locates the first instance of a card type in the users hand, it then discards
        -:   37: *            it using the trashFlag to see if it is gone for good or just discarded
        -:   38: * \param   - int trashCard - card type being looked up
        -:   39: * \param   - int player - player whose hand they are looking through
        -:   40: * \param   - struct gameState state - game information
        -:   41: * \param   - int trashFlag - 0 if discarding, 1 if removing from deck
        -:   42: * \return  - 0 if it is successfully completed, -1 if it could not locate the card
        -:   43: */
function locateAndDiscard called 5 returned 100% blocks executed 100%
        5:   44:int locateAndDiscard(int trashCard, int player, struct gameState *state, int trashFlag)
        -:   45:{
        -:   46:    int i;
       15:   47:    for (i = 0; i < state->handCount[player]; i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
       14:   48:        if (state->hand[player][i] == trashCard){
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        4:   49:            discardCard(i, player, state, trashFlag);
call    0 returned 100%
        4:   50:            return SUCCESS;
        -:   51:        }
        -:   52:    }
        1:   53:    return ERROR;
        -:   54:}
        -:   55:
        -:   56:/*
        -:   57: * \name    - discardHand
        -:   58: * \brief   - Function discards all the cards in the particular user's hand
        -:   59: * \param   - struct gameState state - game information
        -:   60: * \param   - int player - player whose hand they are discarding
        -:   61: * \return  - void
        -:   62: */
function discardHand called 3 returned 100% blocks executed 100%
        3:   63:void discardHand(struct gameState *state, int player)
        -:   64:{
       21:   65:    while(state->handCount[player] > 0)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   66:    {
        -:   67:        // Continually discard card 0 until all cards in hand are gone
       15:   68:        discardCard(0, player, state, 0);
call    0 returned 100%
        -:   69:    }
        3:   70:}
        -:   71:
        -:   72:/*
        -:   73: * \name    - getCardHandQuantity
        -:   74: * \brief   - Function gets the # of a particular card type in the specified player's hand
        -:   75: * \param   - int card - Card type being looked up
        -:   76: * \param   - struct gameState state - game information
        -:   77: * \param   - int player - player whose hand they are looking through
        -:   78: * \return  - quantity of cards (0 if none)
        -:   79: */
function getCardHandQuantity called 4 returned 100% blocks executed 100%
        4:   80:int getCardHandQuantity(int card, struct gameState *state, int player)
        -:   81:{
        4:   82:    int quantity = 0;
        -:   83:    // Loop through the hand
       32:   84:    for (int i = 0; i < state->handCount[player]; i++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   85:        // Check if the card and the player's hand card are the same
       28:   86:        if (card == state->hand[player][i]){
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   87:            // Increment the quantity
       12:   88:            quantity++;
        -:   89:        }
        -:   90:    }
        4:   91:    return quantity;
        -:   92:}
        -:   93:
        -:   94:/*
        -:   95: * \name    - getNextPlayer
        -:   96: * \brief   - Function gets next player to play (player to the left)
        -:   97: * \param   - int currentPlayer - current player
        -:   98: * \param   - int numPlayers - number of players in the game
        -:   99: * \return  - player number in the player array (0-3)
        -:  100: */
function getNextPlayer called 4 returned 100% blocks executed 75%
        4:  101:int getNextPlayer(int currentPlayer, int numPlayers)
        -:  102:{
        4:  103:    int nextPlayer = currentPlayer + 1;
        4:  104:    if (nextPlayer > (numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  105:        nextPlayer = 0;
        -:  106:    }
        4:  107:    return nextPlayer;
        -:  108:}
        -:  109:
        -:  110:/*
        -:  111: * \name    - discardLastDrawnCard
        -:  112: * \brief   - Function discards the last card that was drawn by the player (last card in hand)
        -:  113: * \param   - int player - player whose hand will have the card discarded from
        -:  114: * \param   - struct gameState state - game information
        -:  115: * \return  - 0 on success and -1 on error
        -:  116: */
function discardLastDrawnCard called 8 returned 100% blocks executed 86%
        8:  117:int discardLastDrawnCard(int player, struct gameState *state)
        -:  118:{
        8:  119:    int numCards = state->handCount[player];
        8:  120:    if (numCards > 0){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        2:  121:        if (discardCard((numCards - 1), player, state, 0) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  122:            return ERROR;
        -:  123:        }
        -:  124:    }
        -:  125:    else{
        6:  126:        return ERROR;
        -:  127:    }
        -:  128:
        2:  129:    return SUCCESS;
        -:  130:}
        -:  131:
        -:  132:/*
        -:  133: * \name    - returnLastDrawnCardType
        -:  134: * \brief   - Function gets the card type of the last drawn card
        -:  135: * \param   - int player - player whose hand will have the card discarded from
        -:  136: * \param   - struct gameState state - game information
        -:  137: * \return  - type # of the card or a -1 on error
        -:  138: */
function returnLastDrawnCardType called 4 returned 100% blocks executed 100%
        4:  139:int returnLastDrawnCardType(int player, struct gameState *state)
        -:  140:{
        4:  141:    int numCards = state->handCount[player];
        4:  142:    if (numCards <= 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  143:         return ERROR;
        -:  144:    }
        -:  145:
        2:  146:    return state->hand[player][numCards - 1];
        -:  147:}
        -:  148:
function compare called 242 returned 100% blocks executed 83%
      242:  149:int compare(const void* a, const void* b) {
      242:  150:    if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  151:        return 1;
      242:  152:    if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       66:  153:        return -1;
      176:  154:    return 0;
        -:  155:}
        -:  156:
function newGame called 0 returned 0% blocks executed 0%
    #####:  157:struct gameState* newGame() {
    #####:  158:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:  159:    return g;
        -:  160:}
        -:  161:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  162:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  163:                  int k8, int k9, int k10) {
    #####:  164:    int* k = malloc(10 * sizeof(int));
    #####:  165:    k[0] = k1;
    #####:  166:    k[1] = k2;
    #####:  167:    k[2] = k3;
    #####:  168:    k[3] = k4;
    #####:  169:    k[4] = k5;
    #####:  170:    k[5] = k6;
    #####:  171:    k[6] = k7;
    #####:  172:    k[7] = k8;
    #####:  173:    k[8] = k9;
    #####:  174:    k[9] = k10;
    #####:  175:    return k;
        -:  176:}
        -:  177:
function initializeGame called 10 returned 100% blocks executed 89%
       10:  178:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  179:                   struct gameState *state) {
        -:  180:    int i;
        -:  181:    int j;
        -:  182:    int it;
        -:  183:
        -:  184:    //set up random number generator
       10:  185:    SelectStream(1);
call    0 returned 100%
       10:  186:    PutSeed((long)randomSeed);
call    0 returned 100%
        -:  187:
        -:  188:    //check number of players
       10:  189:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  190:    {
    #####:  191:        return -1;
        -:  192:    }
        -:  193:
        -:  194:    //set number of players
       10:  195:    state->numPlayers = numPlayers;
        -:  196:
        -:  197:    //check selected kingdom cards are different
       98:  198:    for (i = 0; i < 10; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  199:    {
      984:  200:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  201:        {
      896:  202:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  203:            {
        2:  204:                return -1;
        -:  205:            }
        -:  206:        }
        -:  207:    }
        -:  208:
        -:  209:
        -:  210:    //initialize supply
        -:  211:    ///////////////////////////////
        -:  212:
        -:  213:    //set number of Curse cards
        8:  214:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  215:    {
        8:  216:        state->supplyCount[curse] = 10;
        -:  217:    }
    #####:  218:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  219:    {
    #####:  220:        state->supplyCount[curse] = 20;
        -:  221:    }
        -:  222:    else
        -:  223:    {
    #####:  224:        state->supplyCount[curse] = 30;
        -:  225:    }
        -:  226:
        -:  227:    //set number of Victory cards
        8:  228:    if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  229:    {
        8:  230:        state->supplyCount[estate] = 8;
        8:  231:        state->supplyCount[duchy] = 8;
        8:  232:        state->supplyCount[province] = 8;
        -:  233:    }
        -:  234:    else
        -:  235:    {
    #####:  236:        state->supplyCount[estate] = 12;
    #####:  237:        state->supplyCount[duchy] = 12;
    #####:  238:        state->supplyCount[province] = 12;
        -:  239:    }
        -:  240:
        -:  241:    //set number of Treasure cards
        8:  242:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  243:    state->supplyCount[silver] = 40;
        8:  244:    state->supplyCount[gold] = 30;
        -:  245:
        -:  246:    //set number of Kingdom cards
      168:  247:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  248:    {
     1320:  249:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  250:        {
     1240:  251:            if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  252:            {
        -:  253:                //check if card is a 'Victory' Kingdom card
       80:  254:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  255:                {
       10:  256:                    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  257:                        state->supplyCount[i] = 8;
        -:  258:                    }
        -:  259:                    else {
    #####:  260:                        state->supplyCount[i] = 12;
        -:  261:                    }
        -:  262:                }
        -:  263:                else
        -:  264:                {
       75:  265:                    state->supplyCount[i] = 10;
        -:  266:                }
       80:  267:                break;
        -:  268:            }
        -:  269:            else    //card is not in the set choosen for the game
        -:  270:            {
     1160:  271:                state->supplyCount[i] = -1;
        -:  272:            }
        -:  273:        }
        -:  274:
        -:  275:    }
        -:  276:
        -:  277:    ////////////////////////
        -:  278:    //supply intilization complete
        -:  279:
        -:  280:    //set player decks
       24:  281:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  282:    {
       16:  283:        state->deckCount[i] = 0;
       64:  284:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  285:        {
       48:  286:            state->deck[i][j] = estate;
       48:  287:            state->deckCount[i]++;
        -:  288:        }
      128:  289:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  290:        {
      112:  291:            state->deck[i][j] = copper;
      112:  292:            state->deckCount[i]++;
        -:  293:        }
        -:  294:    }
        -:  295:
        -:  296:    //shuffle player decks
       24:  297:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  298:    {
       16:  299:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  300:        {
    #####:  301:            return -1;
        -:  302:        }
        -:  303:    }
        -:  304:
        -:  305:    //draw player hands
       24:  306:    for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  307:    {
        -:  308:        //initialize hand size to zero
       16:  309:        state->handCount[i] = 0;
       16:  310:        state->discardCount[i] = 0;
        -:  311:        //draw 5 cards
        -:  312:        // for (j = 0; j < 5; j++)
        -:  313:        //	{
        -:  314:        //	  drawCard(i, state);
        -:  315:        //	}
        -:  316:    }
        -:  317:
        -:  318:    //set embargo tokens to 0 for all supply piles
      224:  319:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  320:    {
      216:  321:        state->embargoTokens[i] = 0;
        -:  322:    }
        -:  323:
        -:  324:    //initialize first player's turn
        8:  325:    state->outpostPlayed = 0;
        8:  326:    state->phase = 0;
        8:  327:    state->numActions = 1;
        8:  328:    state->numBuys = 1;
        8:  329:    state->playedCardCount = 0;
        8:  330:    state->whoseTurn = 0;
        8:  331:    state->handCount[state->whoseTurn] = 0;
        -:  332:    //int it; move to top
        -:  333:
        -:  334:    //Moved draw cards to here, only drawing at the start of a turn
       48:  335:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  336:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  337:    }
        -:  338:
        8:  339:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  340:
        8:  341:    return 0;
        -:  342:}
        -:  343:
function shuffle called 18 returned 100% blocks executed 100%
       18:  344:int shuffle(int player, struct gameState *state) {
        -:  345:
        -:  346:
        -:  347:    int newDeck[MAX_DECK];
       18:  348:    int newDeckPos = 0;
        -:  349:    int card;
        -:  350:    int i;
        -:  351:
       18:  352:    if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:  353:        return -1;
       17:  354:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  355:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  356:
      197:  357:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      163:  358:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      163:  359:        newDeck[newDeckPos] = state->deck[player][card];
      163:  360:        newDeckPos++;
      566:  361:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      403:  362:            state->deck[player][i] = state->deck[player][i+1];
        -:  363:        }
      163:  364:        state->deckCount[player]--;
        -:  365:    }
      180:  366:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      163:  367:        state->deck[player][i] = newDeck[i];
      163:  368:        state->deckCount[player]++;
        -:  369:    }
        -:  370:
       17:  371:    return 0;
        -:  372:}
        -:  373:
function playCard called 0 returned 0% blocks executed 0%
    #####:  374:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  375:{
        -:  376:    int card;
    #####:  377:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  378:
        -:  379:    //check if it is the right phase
    #####:  380:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  381:    {
    #####:  382:        return -1;
        -:  383:    }
        -:  384:
        -:  385:    //check if player has enough actions
    #####:  386:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  387:    {
    #####:  388:        return -1;
        -:  389:    }
        -:  390:
        -:  391:    //get card played
    #####:  392:    card = handCard(handPos, state);
call    0 never executed
        -:  393:
        -:  394:    //check if selected card is an action
    #####:  395:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  396:    {
    #####:  397:        return -1;
        -:  398:    }
        -:  399:
        -:  400:    //play card
    #####:  401:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  402:    {
    #####:  403:        return -1;
        -:  404:    }
        -:  405:
        -:  406:    //reduce number of actions
    #####:  407:    state->numActions--;
        -:  408:
        -:  409:    //update coins (Treasure cards may be added with card draws)
    #####:  410:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  411:
    #####:  412:    return 0;
        -:  413:}
        -:  414:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  415:int buyCard(int supplyPos, struct gameState *state) {
        -:  416:    int who;
        -:  417:    if (DEBUG) {
        -:  418:        printf("Entering buyCard...\n");
        -:  419:    }
        -:  420:
        -:  421:    // I don't know what to do about the phase thing.
        -:  422:
    #####:  423:    who = state->whoseTurn;
        -:  424:
    #####:  425:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  426:        if (DEBUG)
        -:  427:            printf("You do not have any buys left\n");
    #####:  428:        return -1;
    #####:  429:    } else if (supplyCount(supplyPos, state) <1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  430:        if (DEBUG)
        -:  431:            printf("There are not any of that type of card left\n");
    #####:  432:        return -1;
    #####:  433:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  434:        if (DEBUG)
        -:  435:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  436:        return -1;
        -:  437:    } else {
    #####:  438:        state->phase=1;
        -:  439:        //state->supplyCount[supplyPos]--;
    #####:  440:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  441:
    #####:  442:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  443:        state->numBuys--;
        -:  444:        if (DEBUG)
        -:  445:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  446:    }
        -:  447:
        -:  448:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  449:    //state->discardCount[who]++;
        -:  450:
    #####:  451:    return 0;
        -:  452:}
        -:  453:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  454:int numHandCards(struct gameState *state) {
    #####:  455:    return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  456:}
        -:  457:
function handCard called 0 returned 0% blocks executed 0%
    #####:  458:int handCard(int handPos, struct gameState *state) {
    #####:  459:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  460:    return state->hand[currentPlayer][handPos];
        -:  461:}
        -:  462:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  463:int supplyCount(int card, struct gameState *state) {
        6:  464:    return state->supplyCount[card];
        -:  465:}
        -:  466:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  467:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  468:    int i;
    #####:  469:    int count = 0;
        -:  470:
    #####:  471:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
    #####:  473:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  474:    }
        -:  475:
    #####:  476:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  477:    {
    #####:  478:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  479:    }
        -:  480:
    #####:  481:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  484:    }
        -:  485:
    #####:  486:    return count;
        -:  487:}
        -:  488:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  489:int whoseTurn(struct gameState *state) {
       20:  490:    return state->whoseTurn;
        -:  491:}
        -:  492:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  493:int endTurn(struct gameState *state) {
        -:  494:    int k;
        -:  495:    int i;
    #####:  496:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  497:
        -:  498:    //Discard hand
    #####:  499:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  500:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  501:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  502:    }
    #####:  503:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  504:
        -:  505:    //Code for determining the player
    #####:  506:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  507:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  508:    }
        -:  509:    else {
    #####:  510:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  511:    }
        -:  512:
    #####:  513:    state->outpostPlayed = 0;
    #####:  514:    state->phase = 0;
    #####:  515:    state->numActions = 1;
    #####:  516:    state->coins = 0;
    #####:  517:    state->numBuys = 1;
    #####:  518:    state->playedCardCount = 0;
    #####:  519:    state->handCount[state->whoseTurn] = 0;
        -:  520:
        -:  521:    //int k; move to top
        -:  522:    //Next player draws hand
    #####:  523:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  524:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  525:    }
        -:  526:
        -:  527:    //Update money
    #####:  528:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  529:
    #####:  530:    return 0;
        -:  531:}
        -:  532:
function isGameOver called 1 returned 100% blocks executed 82%
        1:  533:int isGameOver(struct gameState *state) {
        -:  534:    int i;
        -:  535:    int j;
        -:  536:
        -:  537:    //if stack of Province cards is empty, the game ends
        1:  538:    if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  539:    {
    #####:  540:        return 1;
        -:  541:    }
        -:  542:
        -:  543:    //if three supply pile are at 0, the game ends
        1:  544:    j = 0;
       26:  545:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  546:    {
       25:  547:        if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  548:        {
        1:  549:            j++;
        -:  550:        }
        -:  551:    }
        1:  552:    if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  553:    {
    #####:  554:        return 1;
        -:  555:    }
        -:  556:
        1:  557:    return 0;
        -:  558:}
        -:  559:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  560:int scoreFor (int player, struct gameState *state) {
        -:  561:
        -:  562:    int i;
    #####:  563:    int score = 0;
        -:  564:    //score from hand
    #####:  565:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  566:    {
    #####:  567:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  568:            score = score - 1;
        -:  569:        };
    #####:  570:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  571:            score = score + 1;
        -:  572:        };
    #####:  573:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  574:            score = score + 3;
        -:  575:        };
    #####:  576:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  577:            score = score + 6;
        -:  578:        };
    #####:  579:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  580:            score = score + 1;
        -:  581:        };
    #####:  582:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  583:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  584:        };
        -:  585:    }
        -:  586:
        -:  587:    //score from discard
    #####:  588:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  591:            score = score - 1;
        -:  592:        };
    #####:  593:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  594:            score = score + 1;
        -:  595:        };
    #####:  596:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  597:            score = score + 3;
        -:  598:        };
    #####:  599:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  600:            score = score + 6;
        -:  601:        };
    #####:  602:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  603:            score = score + 1;
        -:  604:        };
    #####:  605:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  606:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  607:        };
        -:  608:    }
        -:  609:
        -:  610:    //score from deck
    #####:  611:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  612:    {
    #####:  613:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  614:            score = score - 1;
        -:  615:        };
    #####:  616:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  617:            score = score + 1;
        -:  618:        };
    #####:  619:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  620:            score = score + 3;
        -:  621:        };
    #####:  622:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  623:            score = score + 6;
        -:  624:        };
    #####:  625:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  626:            score = score + 1;
        -:  627:        };
    #####:  628:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  629:            score = score + ( fullDeckCount(player, 0, state) / 10 );
call    0 never executed
        -:  630:        };
        -:  631:    }
        -:  632:
    #####:  633:    return score;
        -:  634:}
        -:  635:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  636:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  637:    int i;
        -:  638:    int j;
        -:  639:    int highScore;
        -:  640:    int currentPlayer;
        -:  641:
        -:  642:    //get score for each player
    #####:  643:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  644:    {
        -:  645:        //set unused player scores to -9999
    #####:  646:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  647:        {
    #####:  648:            players[i] = -9999;
        -:  649:        }
        -:  650:        else
        -:  651:        {
    #####:  652:            players[i] = scoreFor (i, state);
call    0 never executed
        -:  653:        }
        -:  654:    }
        -:  655:
        -:  656:    //find highest score
    #####:  657:    j = 0;
    #####:  658:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  659:    {
    #####:  660:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  661:        {
    #####:  662:            j = i;
        -:  663:        }
        -:  664:    }
    #####:  665:    highScore = players[j];
        -:  666:
        -:  667:    //add 1 to players who had less turns
    #####:  668:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  669:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  670:    {
    #####:  671:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  672:        {
    #####:  673:            players[i]++;
        -:  674:        }
        -:  675:    }
        -:  676:
        -:  677:    //find new highest score
    #####:  678:    j = 0;
    #####:  679:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  680:    {
    #####:  681:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  682:        {
    #####:  683:            j = i;
        -:  684:        }
        -:  685:    }
    #####:  686:    highScore = players[j];
        -:  687:
        -:  688:    //set winners in array to 1 and rest to 0
    #####:  689:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  690:    {
    #####:  691:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  692:        {
    #####:  693:            players[i] = 1;
        -:  694:        }
        -:  695:        else
        -:  696:        {
    #####:  697:            players[i] = 0;
        -:  698:        }
        -:  699:    }
        -:  700:
    #####:  701:    return 0;
        -:  702:}
        -:  703:
        -:  704:/*
        -:  705: * \name    - drawXCards
        -:  706: * \brief   - Function draws x number of cards for a player
        -:  707: * \param   - int count - number of cards that will be drawn
        -:  708: * \param   - int player - player whose hand will have the card discarded from
        -:  709: * \param   - struct gameState state - game information
        -:  710: * \return  - 0 on success and -1 on error
        -:  711: */
function drawXCards called 3 returned 100% blocks executed 88%
        3:  712:int drawXCards(int count, int player, struct gameState *state)
        -:  713:{
       15:  714:    for (int i = 0; i < count; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       12:  715:        if (drawCard(player, state) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  716:            return ERROR;
        -:  717:        }
        -:  718:    }
        3:  719:    return SUCCESS;
        -:  720:}
        -:  721:
function drawCard called 54 returned 100% blocks executed 92%
       54:  722:int drawCard(int player, struct gameState *state)
        -:  723:{   int count;
        -:  724:    int deckCounter;
       54:  725:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  726:
        -:  727:        //Step 1 Shuffle the discard pile back into a deck
        -:  728:        int i;
        -:  729:        //Move discard to deck
        4:  730:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  731:            state->deck[player][i] = state->discard[player][i];
        3:  732:            state->discard[player][i] = -1;
        -:  733:        }
        -:  734:
        1:  735:        state->deckCount[player] = state->discardCount[player];
        1:  736:        state->discardCount[player] = 0;//Reset discard
        -:  737:
        -:  738:        //Shufffle the deck
        1:  739:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  740:
        -:  741:        if (DEBUG) { //Debug statements
        -:  742:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  743:        }
        -:  744:
        1:  745:        state->discardCount[player] = 0;
        -:  746:
        -:  747:        //Step 2 Draw Card
        1:  748:        count = state->handCount[player];//Get current player's hand count
        -:  749:
        -:  750:        if (DEBUG) { //Debug statements
        -:  751:            printf("Current hand count: %d\n", count);
        -:  752:        }
        -:  753:
        1:  754:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  755:
        1:  756:        if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  757:            return -1;
        -:  758:
        1:  759:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  760:        state->deckCount[player]--;
        1:  761:        state->handCount[player]++;//Increment hand count
        -:  762:    }
        -:  763:
        -:  764:    else {
       53:  765:        int count = state->handCount[player];//Get current hand count for player
        -:  766:        int deckCounter;
        -:  767:        if (DEBUG) { //Debug statements
        -:  768:            printf("Current hand count: %d\n", count);
        -:  769:        }
        -:  770:
       53:  771:        deckCounter = state->deckCount[player];//Create holder for the deck count
       53:  772:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       53:  773:        state->deckCount[player]--;
       53:  774:        state->handCount[player]++;//Increment hand count
        -:  775:    }
        -:  776:
       54:  777:    return 0;
        -:  778:}
        -:  779:
function getCost called 6 returned 100% blocks executed 17%
        6:  780:int getCost(int cardNumber)
        -:  781:{
        6:  782:    switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 33%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  783:    {
        -:  784:    case curse:
    #####:  785:        return 0;
        -:  786:    case estate:
    #####:  787:        return 2;
        -:  788:    case duchy:
    #####:  789:        return 5;
        -:  790:    case province:
    #####:  791:        return 8;
        -:  792:    case copper:
        2:  793:        return 0;
        -:  794:    case silver:
        2:  795:        return 3;
        -:  796:    case gold:
        2:  797:        return 6;
        -:  798:    case adventurer:
    #####:  799:        return 6;
        -:  800:    case council_room:
    #####:  801:        return 5;
        -:  802:    case feast:
    #####:  803:        return 4;
        -:  804:    case gardens:
    #####:  805:        return 4;
        -:  806:    case mine:
    #####:  807:        return 5;
        -:  808:    case remodel:
    #####:  809:        return 4;
        -:  810:    case smithy:
    #####:  811:        return 4;
        -:  812:    case village:
    #####:  813:        return 3;
        -:  814:    case baron:
    #####:  815:        return 4;
        -:  816:    case great_hall:
    #####:  817:        return 3;
        -:  818:    case minion:
    #####:  819:        return 5;
        -:  820:    case steward:
    #####:  821:        return 3;
        -:  822:    case tribute:
    #####:  823:        return 5;
        -:  824:    case ambassador:
    #####:  825:        return 3;
        -:  826:    case cutpurse:
    #####:  827:        return 4;
        -:  828:    case embargo:
    #####:  829:        return 2;
        -:  830:    case outpost:
    #####:  831:        return 5;
        -:  832:    case salvager:
    #####:  833:        return 4;
        -:  834:    case sea_hag:
    #####:  835:        return 4;
        -:  836:    case treasure_map:
    #####:  837:        return 4;
        -:  838:    }
        -:  839:
    #####:  840:    return -1;
        -:  841:}
        -:  842:
        -:  843:/*
        -:  844: * \name    - processBaronCard
        -:  845: * \brief   - Function processes the Baron card when played
        -:  846: * \param   - int discardEstate - 1 if discarding an estate, 0 if not
        -:  847: * \param   - int handPos - current index of the Baron Card
        -:  848: * \param   - struct gameState state - game information
        -:  849: * \return  - 0 on success and -1 on error
        -:  850: */
function processBaronCard called 3 returned 100% blocks executed 77%
        3:  851:int processBaronCard(int discardEstate, int handPos, struct gameState *state)
        -:  852:{
        3:  853:    int player = whoseTurn(state);
call    0 returned 100%
        3:  854:    state->numBuys++;
        -:  855:
        3:  856:    if (discardEstate){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  857:        // Unable to locate an estate in the hand
        1:  858:        if (locateAndDiscard(estate, player, state, 0) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  859:            if(DEBUG) {
        -:  860:                printf("No estate cards in your hand, invalid choice\n");
        -:  861:                printf("Must gain an estate if there are any\n");
        -:  862:            }
        -:  863:            // Gain an estate card
    #####:  864:            if (gainCard(estate, state, 0, player) == ERROR){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  865:                return ERROR;
        -:  866:            }
        -:  867:        }
        -:  868:        else{
        -:  869:            // Gain 4 coins
        1:  870:            state->coins += 4;
        -:  871:        }
        -:  872:    }
        -:  873:    else{
        -:  874:        // Gain an estate card
        2:  875:        gainCard(estate, state, 0, player);
call    0 returned 100%
        -:  876:    }
        -:  877:
        -:  878:    // Discard the Baron Card
        3:  879:    discardCard(handPos, player, state, 1);
call    0 returned 100%
        -:  880:
        3:  881:    return SUCCESS;
        -:  882:}
        -:  883:
        -:  884:/*
        -:  885: * \name    - processMinionCard
        -:  886: * \brief   - Function processes the Minion card when played
        -:  887: * \param   - int chooseCoins - player has chosen to receive coins
        -:  888: * \param   - int chooseCards - player has chosen to discard cards
        -:  889: * \param   - int handPos - current index of the Minion Card
        -:  890: * \param   - struct gameState state - game information
        -:  891: * \return  - 0 on success and -1 on error
        -:  892: */
function processMinionCard called 4 returned 100% blocks executed 75%
        4:  893:int processMinionCard(int chooseCards, int chooseCoins, int handPos, struct gameState *state)
        -:  894:{
        4:  895:    int player = whoseTurn(state);
call    0 returned 100%
        4:  896:    state->numActions++;
        -:  897:
        4:  898:    if (chooseCoins){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  899:        state->coins += 2;
        -:  900:    }
        3:  901:    else if (chooseCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  902:        // Discard Hand
        3:  903:        discardHand(state, player);
call    0 returned 100%
        -:  904:        // Gain 4 cards
        3:  905:        if (drawXCards(4, player, state) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  906:            return ERROR;
        -:  907:        }
        -:  908:        // Run through Each Player's hand
       15:  909:        for (int j = 0; j < 4; j++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       12:  910:            if (j != player){   // If not the current player
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        9:  911:                if (state->handCount[j] > 5){   // If they have 5 or more cards
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  912:                    // Discard the hand
    #####:  913:                    discardHand(state, j);
call    0 never executed
        -:  914:                    // Draw 4 new cards
    #####:  915:                    if (drawXCards(4, j, state) == ERROR){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:                        return ERROR;
        -:  917:                    }
        -:  918:                }
        -:  919:            }
        -:  920:        }
        -:  921:    }
        -:  922:
        -:  923:    // Discard the Minion Card
        4:  924:    discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  925:
        4:  926:    return SUCCESS;
        -:  927:}
        -:  928:
        -:  929:/*
        -:  930: * \name    - processAmbassadorCard
        -:  931: * \brief   - Function processes the Ambassador card when played
        -:  932: * \param   - int revealCard - card type player has revealed 
        -:  933: * \param   - int returnCards - # of cards the player will be returning
        -:  934: * \param   - int handPos - current index of the Ambassador Card
        -:  935: * \param   - struct gameState state - game information
        -:  936: * \return  - 0 on success and -1 on error
        -:  937: */
function processAmbassadorCard called 4 returned 100% blocks executed 83%
        4:  938:int processAmbassadorCard(int revealCard, int returnCards, int handPos, struct gameState *state)
        -:  939:{
        4:  940:    int player = whoseTurn(state);
call    0 returned 100%
        4:  941:    int cardType = state->hand[player][revealCard];
        -:  942:
        -:  943:    // Reveal card cannot be the card being played 
        4:  944:    if (revealCard == handPos){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  945:        return ERROR;
        -:  946:    }
        -:  947:
        4:  948:    int cardNumber = getCardHandQuantity(cardType, state, player);
call    0 returned 100%
        -:  949:    // If the user does not have the proper quantity of cards to remove return error
        4:  950:    if (cardNumber < returnCards){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  951:        return ERROR;
        -:  952:    }
        -:  953:
        -:  954:    // If there will not be enough cards to hand out.  The supply and number being
        -:  955:    // returned should be >= to the number of players minus the current player
        3:  956:    if ((state->supplyCount[cardType] + returnCards) < state->numPlayers){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  957:        return ERROR;
        -:  958:    }
        -:  959:
        -:  960:    // Discard the number of cards wanted
        6:  961:    for (int k = 0; k < returnCards; k++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        3:  962:        if (locateAndDiscard(cardType, player, state, 1) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  963:            return ERROR;
        -:  964:        }
        -:  965:    }
        -:  966:
        -:  967:    // Add the cards to the other players discard piles.
        9:  968:    for (int i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  969:        if (i != player){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:  970:            if (gainCard(cardType, state, 0, i) == ERROR){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  971:                return ERROR;
        -:  972:            }
        -:  973:        }
        -:  974:    }
        -:  975:
        3:  976:    return SUCCESS;
        -:  977:}
        -:  978:
        -:  979:/*
        -:  980: * \name    - processTributeCard
        -:  981: * \brief   - Function processes the Tribute card when played
        -:  982: * \param   - int handPos - current index of the Tribute Card
        -:  983: * \param   - struct gameState state - game information
        -:  984: * \return  - 0 on success and -1 on error
        -:  985: */
function processTributeCard called 4 returned 100% blocks executed 70%
        4:  986:int processTributeCard(int handPos, struct gameState *state)
        -:  987:{
        4:  988:    int player = whoseTurn(state);
call    0 returned 100%
        4:  989:    int nextPlayer = getNextPlayer(player, state->numPlayers);
call    0 returned 100%
        4:  990:    int npDiscard = state->discardCount[nextPlayer];
        4:  991:    int npDeck = state->deckCount[nextPlayer];
        4:  992:    int card1 = -1;
        4:  993:    int card2 = -1;
        -:  994:
        4:  995:    if (npDeck >= 2){   // If the deck has two cards that can be pulled
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  996:        card1 = returnLastDrawnCardType(nextPlayer, state);
call    0 returned 100%
        1:  997:        card2 = returnLastDrawnCardType(nextPlayer, state);
call    0 returned 100%
        -:  998:    }
        3:  999:    else if ((npDeck + npDiscard) >= 2){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1000:        // If the deck and discard have two cards that can be pulled 
        1: 1001:        if (npDeck > 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1002:            // Draw First Card
    #####: 1003:            drawCard(nextPlayer, state);
call    0 never executed
    #####: 1004:            card1 = returnLastDrawnCardType(nextPlayer, state);
call    0 never executed
        -: 1005:            // Shuffle in discard pile to get cards to draw
    #####: 1006:            shuffle(nextPlayer, state);
call    0 never executed
        -: 1007:            // Draw the Second Card
    #####: 1008:            drawCard(nextPlayer, state);
call    0 never executed
    #####: 1009:            card2 = returnLastDrawnCardType(nextPlayer, state);
call    0 never executed
        -: 1010:        }
        -: 1011:        else{
        -: 1012:            // Shuffle in discard pile to get cards to draw
        1: 1013:            shuffle(nextPlayer, state);
call    0 returned 100%
        -: 1014:            // Draw First Card
        1: 1015:            drawCard(nextPlayer, state);
call    0 returned 100%
        1: 1016:            card1 = returnLastDrawnCardType(nextPlayer, state);
call    0 returned 100%
        -: 1017:            // Draw the Second Card
        1: 1018:            drawCard(nextPlayer, state);
call    0 returned 100%
        1: 1019:            card2 = returnLastDrawnCardType(nextPlayer, state);
call    0 returned 100%
        -: 1020:        }
        -: 1021:    }
        -: 1022:
        -: 1023:    // Compare Cards Here
        4: 1024:    if (card1 != card2){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1: 1025:        if (isTreasure(card1) == SUCCESS){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1026:            state->coins += 2;
        -: 1027:        }
        1: 1028:        else if (isVictoryCard(card1) == SUCCESS){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1029:            drawXCards(2, player, state);
call    0 never executed
        -: 1030:        }
        -: 1031:        else {  // Action Card
        1: 1032:            state->numActions += 2;
        -: 1033:        }
        -: 1034:
        1: 1035:        if (isTreasure(card2) == SUCCESS){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1036:            state->coins += 2;
        -: 1037:        }
    #####: 1038:        else if (isVictoryCard(card2) == SUCCESS){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1039:            drawXCards(2, player, state);
call    0 never executed
        -: 1040:        }
        -: 1041:        else {  // Action Card
    #####: 1042:            state->numActions += 2;
        -: 1043:        }
        -: 1044:    }
        -: 1045:
        -: 1046:    // Remember to remove the last two cards from the next player
        4: 1047:    discardLastDrawnCard(nextPlayer, state);
call    0 returned 100%
        4: 1048:    discardLastDrawnCard(nextPlayer, state);
call    0 returned 100%
        -: 1049:
        -: 1050:    // Discard the Tribute Card
        4: 1051:    discardCard(handPos, player, state, 0);
call    0 returned 100%
        -: 1052:    
        4: 1053:    return SUCCESS;
        -: 1054:}
        -: 1055:
        -: 1056:/*
        -: 1057: * \name    - processMineCard
        -: 1058: * \brief   - Function processes the Mine card when played
        -: 1059: * \param   - int handPos - current index of the Mine Card
        -: 1060: * \param   - int trashCard - card the user will be trashing
        -: 1061: * \param   - int treasureCard - card the user wants to exchange for the trash card
        -: 1062: * \param   - struct gameState state - game information
        -: 1063: * \return  - 0 on success and -1 on error
        -: 1064: */
function processMineCard called 5 returned 100% blocks executed 93%
        5: 1065:int processMineCard(int handPos, int trashCard, int treasureCard, struct gameState *state)
        -: 1066:{
        5: 1067:    int player = whoseTurn(state);
call    0 returned 100%
        -: 1068:
        -: 1069:    // Check if the card being trashed is a treasure cad
        5: 1070:    if (isTreasure(trashCard) == SUCCESS){ 
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
        -: 1071:        // Check if the card being picked is a treasure card
        4: 1072:        if (isTreasure(treasureCard) == SUCCESS){
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        -: 1073:            // Check if the cost of the new card is within 3 cost of the trashed card
        3: 1074:            if ((getCost(trashCard) + 3) < getCost(treasureCard)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        1: 1075:                gainCard(treasureCard, state, 2, player);
call    0 returned 100%
        1: 1076:                discardCard(handPos, player, state, 0);      // Discard the Mine Card
call    0 returned 100%
        -: 1077:                // Discard the card being trashed
        1: 1078:                if (locateAndDiscard(trashCard, player, state, 1) == SUCCESS){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1079:                    return SUCCESS;
        -: 1080:                }
        -: 1081:            }
        -: 1082:        }
        -: 1083:    }
        5: 1084:    return ERROR;
        -: 1085:}
        -: 1086:
        -: 1087:
function cardEffect called 0 returned 0% blocks executed 0%
    #####: 1088:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1089:{
        -: 1090:    int i;
        -: 1091:    int j;
        -: 1092:    int k;
        -: 1093:    int x;
        -: 1094:    int index;
    #####: 1095:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1096:    int nextPlayer = currentPlayer + 1;
        -: 1097:
        -: 1098:    int temphand[MAX_HAND];// moved above the if statement
    #####: 1099:    int drawntreasure=0;
        -: 1100:    int cardDrawn;
    #####: 1101:    int z = 0;// this is the counter for the temp hand
    #####: 1102:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####: 1103:        nextPlayer = 0;
        -: 1104:    }
        -: 1105:
        -: 1106:
        -: 1107:    //uses switch to select card and perform actions
    #####: 1108:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1109:    {
        -: 1110:    case adventurer:
    #####: 1111:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####: 1112:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1113:                shuffle(currentPlayer, state);
call    0 never executed
        -: 1114:            }
    #####: 1115:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1116:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1117:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1118:                drawntreasure++;
        -: 1119:            else {
    #####: 1120:                temphand[z]=cardDrawn;
    #####: 1121:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1122:                z++;
        -: 1123:            }
        -: 1124:        }
    #####: 1125:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####: 1126:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1127:            z=z-1;
        -: 1128:        }
    #####: 1129:        return 0;
        -: 1130:
        -: 1131:    case council_room:
        -: 1132:        //+4 Cards
    #####: 1133:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:        {
    #####: 1135:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1136:        }
        -: 1137:
        -: 1138:        //+1 Buy
    #####: 1139:        state->numBuys++;
        -: 1140:
        -: 1141:        //Each other player draws a card
    #####: 1142:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:        {
    #####: 1144:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1145:            {
    #####: 1146:                drawCard(i, state);
call    0 never executed
        -: 1147:            }
        -: 1148:        }
        -: 1149:
        -: 1150:        //put played card in played card pile
    #####: 1151:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1152:
    #####: 1153:        return 0;
        -: 1154:
        -: 1155:    case feast:
        -: 1156:        //gain card with cost up to 5
        -: 1157:        //Backup hand
    #####: 1158:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1159:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1160:            state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1161:        }
        -: 1162:        //Backup hand
        -: 1163:
        -: 1164:        //Update Coins for Buy
    #####: 1165:        updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1166:        x = 1;//Condition to loop on
    #####: 1167:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1168:            if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1169:                if (DEBUG)
        -: 1170:                    printf("None of that card left, sorry!\n");
        -: 1171:
        -: 1172:                if (DEBUG) {
        -: 1173:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1174:                }
        -: 1175:            }
    #####: 1176:            else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1177:                printf("That card is too expensive!\n");
call    0 never executed
        -: 1178:
        -: 1179:                if (DEBUG) {
        -: 1180:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1181:                }
        -: 1182:            }
        -: 1183:            else {
        -: 1184:
        -: 1185:                if (DEBUG) {
        -: 1186:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1187:                }
        -: 1188:
    #####: 1189:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1190:                x = 0;//No more buying cards
        -: 1191:
        -: 1192:                if (DEBUG) {
        -: 1193:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1194:                }
        -: 1195:
        -: 1196:            }
        -: 1197:        }
        -: 1198:
        -: 1199:        //Reset Hand
    #####: 1200:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1201:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1202:            temphand[i] = -1;
        -: 1203:        }
        -: 1204:        //Reset Hand
        -: 1205:
    #####: 1206:        return 0;
        -: 1207:
        -: 1208:    case gardens:
    #####: 1209:        return -1;
        -: 1210:
        -: 1211:    case mine:
    #####: 1212:        return processMineCard(handPos, state->hand[currentPlayer][choice1],
call    0 never executed
        -: 1213:                        choice2, state);
        -: 1214:
        -: 1215:    case remodel:
    #####: 1216:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1217:
    #####: 1218:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1219:        {
    #####: 1220:            return -1;
        -: 1221:        }
        -: 1222:
    #####: 1223:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1224:
        -: 1225:        //discard card from hand
    #####: 1226:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1227:
        -: 1228:        //discard trashed card
    #####: 1229:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1230:        {
    #####: 1231:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1232:            {
    #####: 1233:                discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1234:                break;
        -: 1235:            }
        -: 1236:        }
        -: 1237:
        -: 1238:
    #####: 1239:        return 0;
        -: 1240:
        -: 1241:    case smithy:
        -: 1242:        //+3 Cards
    #####: 1243:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:        {
    #####: 1245:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1246:        }
        -: 1247:
        -: 1248:        //discard card from hand
    #####: 1249:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1250:        return 0;
        -: 1251:
        -: 1252:    case village:
        -: 1253:        //+1 Card
    #####: 1254:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1255:
        -: 1256:        //+2 Actions
    #####: 1257:        state->numActions = state->numActions + 2;
        -: 1258:
        -: 1259:        //discard played card from hand
    #####: 1260:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1261:        return 0;
        -: 1262:
        -: 1263:    case baron:
    #####: 1264:        return processBaronCard(choice1, handPos, state);
call    0 never executed
        -: 1265:
        -: 1266:    case great_hall:
        -: 1267:        //+1 Card
    #####: 1268:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1269:
        -: 1270:        //+1 Actions
    #####: 1271:        state->numActions++;
        -: 1272:
        -: 1273:        //discard card from hand
    #####: 1274:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1275:        return 0;
        -: 1276:
        -: 1277:    case minion:
    #####: 1278:        return processMinionCard(choice1, choice2, handPos, state);
call    0 never executed
        -: 1279:
        -: 1280:    case steward:
    #####: 1281:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1282:        {
        -: 1283:            //+2 cards
    #####: 1284:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1285:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1286:        }
    #####: 1287:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1288:        {
        -: 1289:            //+2 coins
    #####: 1290:            state->coins = state->coins + 2;
        -: 1291:        }
        -: 1292:        else
        -: 1293:        {
        -: 1294:            //trash 2 cards in hand
    #####: 1295:            discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1296:            discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1297:        }
        -: 1298:
        -: 1299:        //discard card from hand
    #####: 1300:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1301:        return 0;
        -: 1302:
        -: 1303:    case tribute:
    #####: 1304:        return processTributeCard(handPos, state);
call    0 never executed
        -: 1305:
        -: 1306:    case ambassador:
    #####: 1307:        return processAmbassadorCard(choice1, choice2, handPos, state);
call    0 never executed
        -: 1308:
        -: 1309:    case cutpurse:
        -: 1310:
    #####: 1311:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1312:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1313:        {
    #####: 1314:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1315:            {
    #####: 1316:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1317:                {
    #####: 1318:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1319:                    {
    #####: 1320:                        discardCard(j, i, state, 0);
call    0 never executed
    #####: 1321:                        break;
        -: 1322:                    }
    #####: 1323:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1324:                    {
    #####: 1325:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1326:                        {
        -: 1327:                            if (DEBUG)
        -: 1328:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1329:                        }
    #####: 1330:                        break;
        -: 1331:                    }
        -: 1332:                }
        -: 1333:
        -: 1334:            }
        -: 1335:
        -: 1336:        }
        -: 1337:
        -: 1338:        //discard played card from hand
    #####: 1339:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1340:
    #####: 1341:        return 0;
        -: 1342:
        -: 1343:
        -: 1344:    case embargo:
        -: 1345:        //+2 Coins
    #####: 1346:        state->coins = state->coins + 2;
        -: 1347:
        -: 1348:        //see if selected pile is in play
    #####: 1349:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1350:        {
    #####: 1351:            return -1;
        -: 1352:        }
        -: 1353:
        -: 1354:        //add embargo token to selected supply pile
    #####: 1355:        state->embargoTokens[choice1]++;
        -: 1356:
        -: 1357:        //trash card
    #####: 1358:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1359:        return 0;
        -: 1360:
        -: 1361:    case outpost:
        -: 1362:        //set outpost flag
    #####: 1363:        state->outpostPlayed++;
        -: 1364:
        -: 1365:        //discard card
    #####: 1366:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1367:        return 0;
        -: 1368:
        -: 1369:    case salvager:
        -: 1370:        //+1 buy
    #####: 1371:        state->numBuys++;
        -: 1372:
    #####: 1373:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1374:        {
        -: 1375:            //gain coins equal to trashed card
    #####: 1376:            state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1377:            //trash card
    #####: 1378:            discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1379:        }
        -: 1380:
        -: 1381:        //discard card
    #####: 1382:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1383:        return 0;
        -: 1384:
        -: 1385:    case sea_hag:
    #####: 1386:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1387:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1388:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1389:                state->deckCount[i]--;
    #####: 1390:                state->discardCount[i]++;
    #####: 1391:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1392:            }
        -: 1393:        }
    #####: 1394:        return 0;
        -: 1395:
        -: 1396:    case treasure_map:
        -: 1397:        //search hand for another treasure_map
    #####: 1398:        index = -1;
    #####: 1399:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1400:        {
    #####: 1401:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1402:            {
    #####: 1403:                index = i;
    #####: 1404:                break;
        -: 1405:            }
        -: 1406:        }
    #####: 1407:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1408:        {
        -: 1409:            //trash both treasure cards
    #####: 1410:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1411:            discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1412:
        -: 1413:            //gain 4 Gold cards
    #####: 1414:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1415:            {
    #####: 1416:                gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1417:            }
        -: 1418:
        -: 1419:            //return success
    #####: 1420:            return 1;
        -: 1421:        }
        -: 1422:
        -: 1423:        //no second treasure_map found in hand
    #####: 1424:        return -1;
        -: 1425:    }
        -: 1426:
    #####: 1427:    return -1;
        -: 1428:}
        -: 1429:
function discardCard called 33 returned 100% blocks executed 89%
       33: 1430:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1431:{
        -: 1432:
        -: 1433:    //if card is not trashed, added to Played pile
       33: 1434:    if (trashFlag < 1)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -: 1435:    {
        -: 1436:        //add card to played pile
       27: 1437:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       27: 1438:        state->playedCardCount++;
        -: 1439:    }
        -: 1440:
        -: 1441:    //set played card to -1
       33: 1442:    state->hand[currentPlayer][handPos] = -1;
        -: 1443:
        -: 1444:    //remove card from player's hand
       33: 1445:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 1446:    {
        -: 1447:        //reduce number of cards in hand
        9: 1448:        state->handCount[currentPlayer]--;
        -: 1449:    }
       24: 1450:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1451:    {
        -: 1452:        //reduce number of cards in hand
    #####: 1453:        state->handCount[currentPlayer]--;
        -: 1454:    }
        -: 1455:    else
        -: 1456:    {
        -: 1457:        //replace discarded card with last card in hand
       24: 1458:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1459:        //set last card to -1
       24: 1460:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1461:        //reduce number of cards in hand
       24: 1462:        state->handCount[currentPlayer]--;
        -: 1463:    }
        -: 1464:
       33: 1465:    return 0;
        -: 1466:}
        -: 1467:
function gainCard called 6 returned 100% blocks executed 80%
        6: 1468:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1469:{
        -: 1470:    //Note: supplyPos is enum of choosen card
        -: 1471:
        -: 1472:    //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1473:    if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -: 1474:    {
        1: 1475:        return -1;
        -: 1476:    }
        -: 1477:
        -: 1478:    //added card for [whoseTurn] current player:
        -: 1479:    // toFlag = 0 : add to discard
        -: 1480:    // toFlag = 1 : add to deck
        -: 1481:    // toFlag = 2 : add to hand
        -: 1482:
        5: 1483:    if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1484:    {
    #####: 1485:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1486:        state->deckCount[player]++;
        -: 1487:    }
        5: 1488:    else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1489:    {
    #####: 1490:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1491:        state->handCount[player]++;
        -: 1492:    }
        -: 1493:    else
        -: 1494:    {
        5: 1495:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1496:        state->discardCount[player]++;
        -: 1497:    }
        -: 1498:
        -: 1499:    //decrease number in supply pile
        5: 1500:    state->supplyCount[supplyPos]--;
        -: 1501:
        5: 1502:    return 0;
        -: 1503:}
        -: 1504:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1505:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1506:{
        -: 1507:    int i;
        -: 1508:
        -: 1509:    //reset coin count
        8: 1510:    state->coins = 0;
        -: 1511:
        -: 1512:    //add coins for each Treasure card in player's hand
       48: 1513:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1514:    {
       40: 1515:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1516:        {
       32: 1517:            state->coins += 1;
        -: 1518:        }
        8: 1519:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1520:        {
    #####: 1521:            state->coins += 2;
        -: 1522:        }
        8: 1523:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1524:        {
    #####: 1525:            state->coins += 3;
        -: 1526:        }
        -: 1527:    }
        -: 1528:
        -: 1529:    //add bonus
        8: 1530:    state->coins += bonus;
        -: 1531:
        8: 1532:    return 0;
        -: 1533:}
        -: 1534:
        -: 1535:
        -: 1536://end of dominion.c
